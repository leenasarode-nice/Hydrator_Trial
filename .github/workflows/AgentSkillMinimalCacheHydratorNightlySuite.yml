name: Automation Suite - Nightly Run

on:
  schedule:
    - cron: '30 6 * * *' #Will run as per UTC time

permissions:
  # These permissions are required by https://github.com/aws-actions/configure-aws-credentials
  id-token: write
  contents: read

jobs:
  build:

    runs-on: [ self-hosted, do ]

    env:
      BUID: 344201
      TENANT_GUID: 11ef428e-17b9-8c40-b5a9-0242ac110003
      SERVICE_NAME: "Outbound Contact Results Aggregator"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_CODE_ARTIFACT_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_CODE_ARTIFACT_REGION }} # Region is us-west-2

      - name: Setup Java JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Decode CA certificate
        run: |
          echo "${{ secrets.CA_CERT_BASE64 }}" | base64 -d > ca-cert.crt

      - name: Import CA into Java cacerts
        run: |
          keytool -import -trustcacerts -noprompt -alias my_ca -file ca-cert.crt \
          -keystore ${JAVA_HOME}/lib/security/cacerts -storepass changeit     

      - name: CodeArtifact Auth Token
        run: |
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain ${{ secrets.AWS_CODE_ARTIFACT_DOMAIN }} --domain-owner ${{ secrets.AWS_CODE_ARTIFACT_DOMAIN_OWNER }} --query authorizationToken --output text`
          echo "codeartifactToken=$CODEARTIFACT_AUTH_TOKEN" > gradle.properties

      - name: Make Gradle executable
        run: chmod +x ./gradlew

      - name: Configure AWS Credentials for Livevox Integration Automation Pipeline
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::300813158921:role/ServiceAccess-outbound-livevox-integration-test-automation
          aws-region: us-west-2

      - name: Record test start time
        run: echo "TEST_START=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
        shell: bash

      - name: Gradle Build and Test
        run: ./gradlew test --tests "TestOutboundContactResultsAggregator"

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: test-results
          path: test-output/ExtentReport/ # Update with the actual path to your test output directory

      - name: Record test end time and duration
        if: always()
        run: |
          echo "TEST_END=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
          start=$(date -d "${{ env.TEST_START }}" +%s)
          end=$(date +%s)
          duration=$((end - start))
          mins=$((duration / 60))
          secs=$((duration % 60))
          echo "TEST_DURATION=${mins}m ${secs}s" >> $GITHUB_ENV
        shell: bash

      - name: Read Summary Report to Get Test Results
        if: always()
        run: |
          PASSED=$(jq -r '.PassedTestCaseCount' test-output/ExtentReport/TestExecutionReport.json)
          echo "PASSED=$PASSED" >> $GITHUB_ENV 
          FAILURES=$(jq -r '.FailedTestCaseCount' test-output/ExtentReport/TestExecutionReport.json)
          echo "FAILURES=$FAILURES" >> $GITHUB_ENV          
          SKIPPED=$(jq -r '.SkippedTestCaseCount' test-output/ExtentReport/TestExecutionReport.json)
          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
          TOTAL=$(( $PASSED + $FAILURES + $SKIPPED ))
          echo "TOTAL=$TOTAL" >> $GITHUB_ENV

      - name: Generate Pie Chart
        if: always()
        run: |
          pip install matplotlib
          python <<EOF
          import matplotlib.pyplot as plt
          all_labels = ['Passed', 'Failed', 'Skipped']
          all_sizes = [${{ env.PASSED }}, ${{ env.FAILURES }}, ${{ env.SKIPPED }}]
          all_colors = ['#4CAF50', '#FF9999', '#FFD700']
          
          labels = [label for label, size in zip(all_labels, all_sizes) if size > 0]
          sizes = [size for size in all_sizes if size > 0]
          colors = [color for size, color in zip(all_sizes, all_colors) if size > 0]
          
          plt.figure(figsize=(3, 3))
          wedges, texts, autotexts = plt.pie(
          sizes,
          labels=labels,
          colors=colors,
          autopct=lambda pct: f'{pct:.1f}%' if pct > 0 else '',  # Hide 0%
          startangle=90,
          textprops=dict(color="black"),
          pctdistance=0.7,
          labeldistance=1.1
          )
          plt.axis('equal')
          plt.tight_layout()
          plt.savefig('chart.png')
          EOF

#      - name: Configure AWS Credentials
#        if: always()
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2
#
#      - name: Install Python dependencies
#        if: always()
#        run: pip install boto3
#
#
#      - name: Print EMAIL_TO env variable
#        if: always()
#        run: |
#          echo "EMAIL_TO is: $EMAIL_TO"
#        env:
#          EMAIL_TO: ${{ secrets.EMAIL_TO }}
#
#      - name: Send nightly suite email via SES (Python)
#        if: always()
#        env:
#          EMAIL_TO: ${{ secrets.EMAIL_TO }}
#          AWS_REGION: us-west-2
#        run: python send_nightly_suite_email.py
